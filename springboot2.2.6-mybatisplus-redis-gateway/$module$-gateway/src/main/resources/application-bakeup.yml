server:
  port: 8088
spring:
  datasource:
    tidb:
      name: mysql-data
      url: jdbc:mysql://{host}:{port}/{database}?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=round&allowMultiQueries=true
      username: {username}
      password: {password}
      driver-class-name: com.mysql.cj.jdbc.Driver
      type: com.alibaba.druid.pool.DruidDataSource # 使用druid数据源
      initialSize: 10 #初始化连接数量，最大最小连接数
      maxActive: 100
      minIdle: 3
      maxWait: 600000  #获取连接等待超时的时间
      removeAbandoned: true  #超过时间限制是否回收
      removeAbandonedTimeout: 180 #超过时间限制多长
      timeBetweenEvictionRunsMillis: 600000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      minEvictableIdleTimeMillis: 300000 #配置一个连接在池中最小生存的时间，单位是毫秒
      validationQuery: SELECT 1 FROM DUAL #用来检测连接是否有效的sql，要求是一个查询语句
      testWhileIdle: true #申请连接的时候检测
      testOnBorrow: false #申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      testOnReturn: false #归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      poolPreparedStatements: true #打开PSCache，并且指定每个连接上PSCache的大小
      maxPoolPreparedStatementPerConnectionSize: 100
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      filters: stat #属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall
    uid:
      name: uid-data
      url: jdbc:mysql://{host}:{port}/{database}?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=round&allowMultiQueries=true
      username: {username}
      password: {password}
      driver-class-name: com.mysql.cj.jdbc.Driver
      type: com.alibaba.druid.pool.DruidDataSource # 使用druid数据源
      initialSize: 10 #初始化连接数量，最大最小连接数
      maxActive: 100
      minIdle: 3
      maxWait: 600000  #获取连接等待超时的时间
      removeAbandoned: true  #超过时间限制是否回收
      removeAbandonedTimeout: 180 #超过时间限制多长
      timeBetweenEvictionRunsMillis: 600000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      minEvictableIdleTimeMillis: 300000 #配置一个连接在池中最小生存的时间，单位是毫秒
      validationQuery: SELECT 1 FROM DUAL #用来检测连接是否有效的sql，要求是一个查询语句
      testWhileIdle: true #申请连接的时候检测
      testOnBorrow: false #申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      testOnReturn: false #归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      poolPreparedStatements: true #打开PSCache，并且指定每个连接上PSCache的大小
      maxPoolPreparedStatementPerConnectionSize: 100
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      filters: stat #属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall

  redis:
    database: 0  #Redis索引0~15，默认为0
    host: {host}
    port: {port}
    password: {password} #密码（默认为空）
    timeout: 5000 #连接超时时间（毫秒）
    lettuce:
      pool:
        max-active: 100 #最大连接数
        max-idle: 50 #最大空闲连接数
        min-idle: 10 #最小空闲连接数
        max-wait: 5s #连接池阻塞最大等待时间
        time-between-eviction-runs: 1s #空闲对象逐出器线程的运行间隔时间.空闲连接线程释放周期时间.
  #      cluster:
  #        refresh:
  #          adaptive: true #redis集群拓扑自动刷新
  #    cluster:
  #      nodes:
  #        - 192.168.1.1:6789
  #        - 192.168.1.1:6789
  #        - 192.168.1.1:6789

  cloud:
    gateway:
      httpclient:
        # 全局响应时间，最长等待时间，超过则返回给前端超时错误
        response-timeout: PT10S
        # 全局tcp链接超时时间，默认 45s
        connect-timeout: 45000
        pool:
          # 最大空闲时间
          max-idle-time: PT10S
          # 定时回收HttpClient连接池中连接的时间间隔
          eviction-interval: PT30S
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用路由名称调用服务
          enabled: true
      default-filters:
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 2  #流速 每秒
            redis-rate-limiter.burstCapacity: 10   #令牌桶的容积
            key-resolver: "#{@uriKeyResolver}" #SPEL表达式去的对应的bean


jetcache:
  statIntervalMinutes: 1
  areaInCacheName: false
  hidePackages: $package$
  local:
    # 默认永久本地缓存
    default:
      type: caffeine
      keyConvertor: fastjson
  remote:
    # 默认永久的远程缓存
    default:
      type: redis
      keyConvertor: fastjson
      valueEncoder: kryo
      valueDecoder: kryo
      poolConfig:
        minIdle: 5
        maxIdle: 20
        maxTotal: 50
      host: \${REDIS_HOST:8.210.212.241}
      port: \${REDIS_PORT:30379}
      password: \${REDIS_PASSWORD:ty5tmRlj7aRRcsQ^Wi8}