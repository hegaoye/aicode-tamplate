<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~  Copyright (c) 2017. 郑州仁中和科技有限公司.保留所有权利.
  ~                        http://www.rzhkj.com/
  ~        郑州仁中和科技有限公司保留所有代码著作权.如有任何疑问请访问官方网站与我们联系.
  ~        代码只针对特定客户使用，不得在未经允许或授权的情况下对外传播扩散.恶意传播者，法律后果自行承担.
  ~        本代码仅用于AI-Code.
  ~
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-autowire="byName">

    <!-- 定义SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:mybatis/*/*.xml</value>
                <value>classpath:/META-INF/mybatis/mapper/WORKER*.xml</value>
            </list>
        </property>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <!--定义事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- AOP配置数据事务管理，也可以采用注解方式，也可以写在LoggerAspect里面 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <tx:method name="*NT" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="is*" read-only="true"/>
            <tx:method name="read*" read-only="true"/>
            <tx:method name="check*" read-only="true"/>
            <tx:method name="gen*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="sync*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- 对子类业务逻辑层实施事务 -->
    <aop:config>
        <aop:pointcut id="executeService" expression="execution(* ${basePackage}.*.service.*SVImpl.*(..))"/>
        <aop:advisor pointcut-ref="executeService" advice-ref="txAdvice"/>
    </aop:config>

    <!-- 注解方式的事务拦截器 开启 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>